#include "FS_editor.h"
#include <FS.h>

//File: edit.htm.gz, Size: 4151
#define edit_htm_gz_len 4117
const uint8_t edit_htm_gz[] PROGMEM = {
 0x1F,0x8B,0x08,0x08,0x96,0x3F,0x11,0x65,0x04,0x00,0x65,0x64,0x69,0x74,0x2E,0x68,0x74,0x6D,0x00,
 0xB5,0x1A,0x0B,0x5B,0xDB,0x36,0xF0,0xAF,0x18,0x77,0x63,0xF6,0xE2,0x38,0x0E,0x50,0xD6,0x39,0x18,
 0x16,0x1E,0x2D,0x6D,0x79,0x27,0x69,0x47,0x3B,0xB6,0x4F,0xB1,0x95,0x58,0x60,0xCB,0x9E,0x2D,0x13,
 0x68,0x96,0xFF,0xBE,0x93,0xE4,0x67,0x08,0xDD,0xE3,0xDB,0xA0,0x25,0x92,0x4E,0x27,0xDD,0x9D,0xEE,
 0x29,0x65,0x67,0xED,0xF0,0xFC,0x60,0x78,0x7D,0x71,0xA4,0xF8,0x2C,0x0C,0x76,0x77,0xF8,0x5F,0x25,
 0x40,0x74,0xEA,0x60,0xBA,0xBB,0xC3,0x08,0x0B,0xF0,0xEE,0xD1,0xE0,0x42,0x39,0xF2,0x08,0x8B,0x92,
 0x9D,0x8E,0x1C,0xD9,0x49,0xD9,0x63,0x80,0x95,0x10,0x7B,0x04,0x39,0xA9,0x9B,0x60,0x98,0x6C,0xBA,
 0xE1,0xFC,0x4B,0x9B,0x50,0x0F,0x3F,0xD8,0x9B,0x96,0xD5,0x8B,0xA3,0x94,0x30,0x12,0x51,0x1B,0x8D,
 0xD3,0x28,0xC8,0x18,0xEE,0x05,0x78,0xC2,0xEC,0x97,0xF1,0x43,0x6F,0x1C,0x25,0x1E,0x4E,0xEC,0x6E,
 0xFC,0xA0,0x00,0x88,0x78,0xCA,0x8B,0xAD,0xAD,0xAD,0xDE,0x18,0xB9,0x77,0xD3,0x24,0xCA,0xA8,0xD7,
 0x76,0xA3,0x20,0x4A,0xEC,0x17,0x93,0x97,0xFC,0xB7,0xE7,0x91,0x34,0x0E,0xD0,0xA3,0x4D,0x23,0x8A,
 0x01,0xF7,0xA1,0x9D,0xFA,0xC8,0x8B,0x66,0xB6,0xA5,0x58,0x4A,0xD7,0x82,0x45,0x92,0xE9,0x18,0x69,
 0x96,0xC1,0x7F,0xCD,0x2D,0xBD,0x37,0x89,0x28,0x6B,0xA7,0xE4,0x0B,0xB6,0xBB,0x1B,0xB0,0x9B,0xE8,
 0x4E,0x50,0x48,0x82,0x47,0x3B,0x45,0x34,0x6D,0xA7,0x38,0x21,0x13,0x39,0x3C,0xC3,0x64,0xEA,0x33,
 0xFB,0x07,0xCB,0x5A,0x00,0xFD,0x4A,0x16,0xCC,0x03,0x92,0x02,0x32,0x67,0x4F,0xEE,0xC7,0xA2,0xD8,
 0xB6,0x04,0xE9,0xF0,0x11,0xA2,0x64,0x4A,0x28,0x34,0x62,0xE4,0x79,0x84,0x4E,0x6D,0x89,0x16,0x90,
 0x79,0xC9,0x6D,0x82,0x03,0xC4,0xC8,0x3D,0xEE,0x85,0x84,0xB6,0x67,0xC4,0x63,0xBE,0xBD,0x6D,0x01,
 0x15,0x6E,0x96,0xA4,0xC0,0x53,0x1C,0x11,0xCA,0x70,0x22,0xD0,0xD2,0x18,0xD1,0xB9,0x64,0x95,0x0B,
 0xA0,0xE4,0x93,0xD0,0x80,0x50,0xDC,0x1E,0x07,0x91,0x7B,0x57,0xEE,0xB4,0x1D,0x3F,0xE4,0x7B,0xD9,
 0x7E,0x74,0x8F,0x93,0x79,0x25,0x2E,0x81,0xDD,0x00,0x36,0x96,0xC6,0x18,0x2F,0x4C,0x76,0x9F,0x01,
 0xD4,0xE0,0x9F,0x9C,0xCB,0x7C,0xD5,0x3A,0x4B,0x4D,0xC6,0x73,0x14,0x42,0xE3,0x8C,0xCD,0x9F,0x1E,
 0x65,0x14,0x23,0x97,0xB0,0x47,0xDB,0x12,0xD3,0xE6,0x5C,0x96,0x80,0x95,0x84,0x28,0x50,0xB8,0xCC,
 0x95,0x0F,0x38,0xF1,0x10,0x45,0x46,0x3F,0x21,0x28,0x30,0x06,0x95,0xD4,0xDB,0x61,0xF4,0xA5,0x9D,
 0x41,0x1B,0xFA,0x01,0x76,0x99,0x14,0x32,0x9C,0xC3,0xF8,0x8E,0xB0,0xA7,0x80,0x27,0x03,0x35,0x71,
 0x09,0x21,0xF9,0xF2,0x00,0xBB,0x20,0x1E,0x41,0x8A,0xE4,0x5C,0x32,0xD5,0x1E,0x47,0x8C,0x45,0xA1,
 0x50,0xB9,0x92,0x61,0x45,0x68,0xCD,0xAB,0x27,0x27,0xB2,0x5A,0xFA,0xB5,0xE5,0x7B,0x20,0x57,0x46,
 0x5C,0x14,0xB4,0x51,0x40,0xA6,0xD4,0x0E,0x89,0xE7,0x05,0xB8,0x57,0x3B,0x86,0x2C,0x09,0x34,0x0F,
 0x31,0x64,0x93,0x10,0x4D,0x71,0x27,0xA6,0x53,0x80,0xA6,0x78,0x7B,0xCB,0x20,0x1F,0xF6,0xCF,0xAF,
 0x66,0xD6,0xFB,0x37,0xD3,0xA8,0x0F,0x3F,0x67,0x83,0x91,0x7F,0x34,0x9A,0x42,0x6B,0xBF,0xCF,0x7F,
 0x2E,0x0F,0xFA,0x97,0xF0,0x71,0xD0,0x6D,0xDD,0x4E,0x7E,0xEF,0xF3,0xE1,0x37,0xDE,0xFE,0x70,0x74,
 0xD4,0xEF,0xBF,0xEF,0xBC,0x3D,0x9B,0x7D,0x7C,0xBF,0x7D,0xC9,0x07,0x03,0xEB,0xEA,0x83,0x6F,0x8D,
 0x36,0x7E,0x0C,0xBD,0x63,0xCF,0x77,0xC3,0x51,0xFF,0xF2,0xE3,0xD5,0xFD,0x75,0x38,0x9A,0x0E,0x3E,
 0x76,0xFD,0x4F,0x1B,0x1F,0x06,0x9F,0x3E,0xBE,0xBE,0xC3,0x3F,0x1F,0xBF,0xFB,0x34,0x9C,0x01,0xC2,
 0x61,0x34,0x18,0x5D,0xED,0x7F,0xD8,0x9F,0x7E,0xDA,0x77,0x8F,0x1E,0xC6,0xC1,0xD9,0xFE,0x9B,0xFE,
 0xB8,0xBF,0xE1,0x62,0x3C,0x1D,0x5E,0xED,0x67,0x6F,0xDF,0x9F,0x4F,0x09,0xF1,0x07,0x9F,0xCE,0x86,
 0xEE,0xC1,0xCB,0x93,0xD1,0x71,0x9F,0xF8,0x67,0xEF,0xAE,0xAC,0xBB,0x37,0xEF,0x0F,0x0E,0xDD,0xEB,
 0x77,0xD7,0xDB,0x87,0x9B,0x9D,0x1F,0x7E,0x38,0xF5,0xCE,0x09,0x1D,0xDE,0x7F,0xE9,0x4F,0x0F,0x66,
 0xAF,0x1E,0xD3,0xA1,0xFF,0xF6,0x9E,0x76,0x3E,0x44,0xB7,0x6F,0x1F,0x4F,0xE1,0xFF,0xC5,0x45,0x6B,
 0x3C,0xE8,0xA6,0xA3,0xCB,0xB7,0x1F,0x36,0xD2,0x1F,0x5F,0xC6,0xFB,0x87,0x87,0xF7,0xE1,0xF8,0xA2,
 0x13,0x7A,0x77,0x13,0xF6,0x6A,0x93,0xC5,0xD7,0xD3,0xEC,0xD3,0xEF,0x2F,0xDF,0xF9,0x9D,0x73,0x8C,
 0xAE,0xFD,0xD6,0xE3,0x97,0xC7,0x57,0xFE,0xF0,0xF8,0xFE,0x2C,0x40,0x0F,0x67,0x67,0xEE,0x97,0xB0,
 0x15,0xA0,0x1F,0xCF,0x87,0x01,0x4A,0xBA,0x23,0xAF,0xDF,0x69,0x1D,0x6C,0xF4,0xB7,0x58,0x72,0x75,
 0x40,0x0F,0x37,0x6F,0x07,0xAF,0xF6,0xF7,0xBB,0xD1,0xF8,0xF7,0x8D,0x37,0x77,0xDB,0x6F,0x46,0xDB,
 0x97,0xE3,0xCB,0xFE,0x60,0x6B,0x7F,0x84,0xAE,0x07,0x97,0xFD,0xC9,0xD6,0xD8,0xF7,0xDF,0xBF,0x1F,
 0xBE,0xF6,0xFA,0x5F,0x92,0xFE,0xF9,0xAC,0xFF,0x70,0x34,0xEA,0x1F,0xB7,0xDE,0x1F,0x9D,0x5A,0xDD,
 0xC1,0xF5,0xE6,0xF4,0x74,0x7B,0xB6,0x9F,0x1E,0xF5,0x2F,0xF7,0xAD,0xE9,0xBB,0x56,0x88,0x3E,0x45,
 0x07,0x9B,0xD3,0xB7,0xDB,0xE4,0xE2,0x1A,0xF5,0xDF,0xEE,0xBF,0x4B,0xC9,0x55,0x78,0x3C,0xB2,0xFA,
 0xFD,0x93,0x73,0xFC,0xFA,0x60,0x13,0xBD,0xDF,0x70,0x3F,0x82,0xFC,0x47,0x3F,0xE3,0x1F,0x5A,0xFD,
 0xD9,0xB9,0x15,0xB8,0x3F,0xE2,0xE1,0xF1,0xF5,0x50,0x9C,0xCE,0x51,0xF0,0x7A,0x78,0x37,0xC8,0x2E,
 0xC3,0x83,0x03,0x5D,0xA1,0x51,0x3B,0xC1,0x31,0x46,0xAC,0xEE,0xAE,0x0A,0xFB,0xE0,0xDA,0x55,0x69,
 0x61,0x6E,0xA7,0x0C,0x3F,0xB0,0xB6,0x87,0xDD,0x28,0x41,0x62,0x0E,0x20,0xE0,0x84,0xAB,0xD8,0xE2,
 0x27,0xE1,0x3F,0x15,0xE9,0x3F,0x15,0x44,0x3D,0x45,0x2B,0x0C,0x01,0x9C,0x07,0xE0,0xDC,0x13,0x17,
 0xB7,0x63,0xF2,0x80,0x83,0xB6,0x40,0xB6,0x2D,0x7D,0x2E,0xEC,0xAD,0x98,0x86,0x28,0x09,0xE5,0xAA,
 0xC5,0x80,0x77,0x8B,0x5C,0x0C,0x8E,0x0D,0x4C,0x26,0x84,0xCF,0xDC,0x76,0xA2,0xA4,0x3D,0xCE,0xA6,
 0x13,0xF2,0x00,0x06,0x3D,0x21,0x94,0x30,0xAC,0x74,0xD3,0xC5,0x4F,0xC5,0x32,0x77,0xF8,0x71,0x92,
 0xA0,0x10,0xA7,0xCA,0xDF,0x5C,0x66,0x3E,0x49,0xA2,0x70,0x5E,0x39,0x41,0x16,0xD5,0x3A,0x8B,0xC5,
 0x8B,0x2C,0x0E,0x22,0x04,0x6C,0x3E,0xF1,0x1C,0x85,0x3F,0x4D,0xB8,0x59,0x95,0x7E,0xB5,0x30,0xB3,
 0x0D,0x30,0xCB,0x86,0x59,0x6F,0x6C,0x55,0xA6,0xDB,0x16,0x73,0xB9,0xBF,0xAF,0x8B,0xBE,0xE6,0x0F,
 0x6A,0xEE,0xEE,0x05,0x03,0x91,0xAE,0xDE,0x5C,0x6E,0x22,0x3D,0x43,0x45,0x80,0x74,0xD4,0x5D,0xE1,
 0xA9,0x0B,0x4E,0x60,0xDE,0xE2,0x05,0x16,0x71,0xCF,0x78,0x11,0x27,0x70,0x1A,0x78,0xF6,0x95,0x35,
 0x0B,0x9E,0x9A,0x6B,0xF3,0x35,0xCB,0x88,0x27,0x59,0xA8,0xC2,0x9E,0xA0,0xB5,0x5C,0xFA,0x09,0x57,
 0x1C,0x5C,0x52,0xF3,0x92,0x53,0xF3,0x55,0xA9,0x6E,0x6E,0x7F,0x9B,0xD3,0xB0,0x65,0x7D,0xBB,0x30,
 0xE5,0xDC,0x32,0x24,0x77,0x2D,0xF8,0x29,0x22,0xEF,0xAB,0x8A,0x84,0xF1,0x4B,0xFE,0x5B,0x10,0x08,
 0xEB,0xD4,0x81,0x9B,0x5B,0x3F,0xBE,0xF2,0xC6,0x05,0x50,0x32,0xF6,0x3C,0x3C,0x41,0x1E,0xC9,0x52,
 0xFB,0xA5,0xF5,0x6D,0x2E,0xCF,0x8D,0x2D,0xE0,0x3D,0x3F,0xDC,0xBC,0x53,0x69,0x6C,0x1A,0x13,0xAA,
 0x6C,0xA4,0x0A,0x3F,0x6F,0x94,0x94,0x8A,0xD9,0x88,0xF6,0x8B,0x9F,0x2A,0xD5,0xE4,0xF3,0xE7,0xD6,
 0xB7,0x73,0x96,0x40,0x34,0x99,0x40,0xAC,0xB1,0x93,0x88,0x21,0x86,0x35,0x4B,0x5F,0x74,0xAD,0x55,
 0x80,0xCD,0x6D,0xCB,0xC3,0x53,0x7D,0xB1,0xD8,0xE9,0x88,0xB8,0xB6,0xBB,0x03,0xA6,0x46,0x62,0xB6,
 0x3B,0xC9,0xA8,0xCB,0x69,0x50,0xA6,0x58,0xC3,0xFA,0x3C,0xC1,0x2C,0x4B,0xA8,0xE2,0x45,0x6E,0xC6,
 0x95,0xDD,0x9C,0x62,0x76,0x24,0xF5,0x7E,0xFF,0xF1,0xAD,0x07,0x33,0x16,0x25,0x82,0xBB,0x12,0x01,
 0x0C,0x18,0xF6,0xCB,0x71,0x1A,0xF3,0x21,0xC0,0xC0,0x22,0xEF,0xF1,0xA3,0x86,0x0D,0x56,0x22,0x62,
 0x93,0x8F,0x6B,0xC5,0x2C,0x80,0x51,0x7D,0x7E,0x0F,0x42,0x40,0x0E,0xFE,0xCC,0x6E,0x0C,0xE2,0x50,
 0xF8,0xE8,0xE5,0xB3,0xD1,0x0E,0xD9,0x6B,0x77,0x6D,0xB4,0x4B,0xF6,0xBA,0x60,0x5E,0xB5,0xD5,0xE5,
 0xBE,0xAF,0x49,0x80,0x47,0xB9,0xC1,0xF1,0x6D,0xF8,0x62,0xE5,0x14,0x24,0x17,0xDF,0xB0,0xAC,0x35,
 0x07,0xEF,0xA1,0x00,0xC3,0xBE,0xEA,0xD1,0xD5,0xD5,0xF9,0xD5,0x67,0xB5,0x85,0x5B,0xEA,0x8D,0xAD,
 0xA8,0x2D,0xAA,0xDB,0xCC,0x4C,0xF0,0x24,0xC1,0xA9,0x7F,0x81,0x98,0xAF,0xA5,0xE6,0x3D,0x0A,0xB2,
 0x3A,0x23,0x44,0xC3,0x92,0x44,0xE6,0x50,0x3C,0x53,0x5E,0x83,0x98,0x0F,0x21,0xD4,0xF5,0x98,0x89,
 0xE2,0x18,0x53,0x4F,0x53,0x63,0x40,0x54,0x0D,0xAC,0x1B,0x09,0xFE,0x3D,0xC3,0x29,0x4B,0x4D,0xE4,
 0xC1,0xF0,0xC5,0x68,0xA8,0x1A,0x6A,0x87,0xDB,0x91,0x0A,0xB4,0x21,0x7D,0xC1,0x57,0x89,0x1C,0x90,
 0xA4,0x3A,0xCE,0x40,0xA1,0xA8,0xAA,0xF7,0x22,0x93,0x50,0x8A,0x93,0xE3,0xE1,0xE9,0x89,0xA3,0x5E,
 0x49,0x42,0x94,0x13,0x92,0x02,0x8A,0x38,0xA2,0x7C,0x93,0x03,0x9F,0x04,0x9E,0x16,0xE9,0x3D,0xBE,
 0x84,0x2B,0x96,0x10,0x09,0x0A,0xAC,0xE0,0x9A,0xEC,0x31,0xC6,0x8E,0x3A,0x01,0x61,0xA8,0x86,0x6B,
 0x86,0x59,0xC0,0x48,0x1C,0x60,0x67,0xAD,0x0B,0x3D,0x8A,0x42,0x80,0xF1,0xD8,0xCC,0x61,0xC4,0x73,
 0x54,0xE9,0xA1,0xA4,0x5F,0x5B,0xB9,0x8B,0x2B,0x77,0x49,0x1B,0xBB,0xA4,0x75,0x5C,0xC9,0x70,0x9A,
 0x6F,0xCC,0xDD,0x3C,0xF4,0xF2,0xAD,0x0A,0x98,0x87,0x27,0x08,0x28,0xF9,0x00,0xD2,0x84,0xD1,0xCE,
 0xAA,0x8D,0x52,0xB9,0x91,0xD7,0x94,0x88,0x57,0x97,0x88,0x3C,0xDD,0x55,0xC8,0x9E,0x44,0x0E,0x9A,
 0xC8,0x41,0x1D,0xF9,0x40,0x28,0xC9,0x2A,0xE4,0x40,0x22,0x27,0x0D,0x16,0x13,0xC1,0xA2,0x74,0x7B,
 0x6D,0x2E,0x4D,0x60,0x08,0xB0,0x93,0x1A,0x9B,0xBC,0x07,0x56,0x8A,0xC6,0x01,0xF6,0x9C,0x35,0x0B,
 0x7A,0x3C,0xD9,0x76,0x36,0xAC,0x15,0x7B,0x24,0x72,0x8F,0xAC,0x49,0x60,0x56,0x27,0x50,0x19,0xA0,
 0x7B,0xAC,0xAC,0x22,0x30,0xD3,0x8D,0xC0,0x8C,0xA8,0x1B,0x10,0xF7,0xCE,0xA9,0xAC,0x45,0x9F,0x93,
 0x52,0x43,0x0D,0x2A,0x1C,0xDD,0x28,0x09,0xAA,0x21,0x68,0x14,0xF2,0x5E,0x18,0xD9,0xCA,0x05,0xA8,
 0x89,0x1F,0xB0,0x7B,0x10,0x85,0x21,0xE2,0xBA,0x9B,0x02,0x05,0x79,0x47,0xD5,0x17,0x46,0xB4,0x12,
 0xE7,0x19,0x13,0x31,0xBC,0xD5,0x24,0x4E,0x34,0x30,0x39,0xC7,0x35,0xB9,0x0C,0x53,0x13,0xE4,0x38,
 0x65,0xFE,0xD7,0x4D,0x28,0x57,0xD0,0x1C,0xE5,0xB3,0x75,0x93,0x73,0xF2,0xD4,0xA6,0xCE,0x07,0x4B,
 0x46,0xC5,0x85,0xD7,0xD0,0x4B,0xBD,0x92,0x41,0x01,0xAB,0xF4,0xBD,0x82,0xAA,0x8B,0x05,0xEC,0x07,
 0xF4,0xFB,0x50,0xF2,0xE1,0xBF,0xCF,0x40,0x45,0xA3,0x50,0x78,0x83,0x3A,0x1D,0x6D,0xCF,0xFE,0xC5,
 0xD4,0x3E,0xFF,0x6A,0xDE,0xB4,0x74,0x7D,0xEF,0x9B,0x8E,0x90,0xB0,0xC6,0xF4,0xCF,0xDD,0x1B,0x03,
 0x01,0xD8,0xFC,0x5E,0xFF,0xC5,0x14,0xE0,0x06,0xAC,0x77,0x1F,0x41,0x24,0xE1,0x3B,0x71,0x05,0x8B,
 0x26,0x0A,0x5A,0x5F,0xD7,0x98,0x83,0x1A,0xC7,0xD8,0x62,0x2D,0xD5,0x04,0x3F,0xB5,0x58,0x2C,0x3B,
 0xBF,0x21,0x04,0x7A,0xE9,0x5B,0x4B,0x80,0xA0,0x9E,0xF3,0x0C,0x35,0x22,0x15,0x5C,0x8B,0x08,0x02,
 0x4C,0xA7,0x89,0xEB,0x48,0xA9,0xED,0x15,0x30,0x07,0xBC,0x60,0xB5,0x26,0xCA,0x51,0x97,0xF5,0xBF,
 0x14,0x18,0x36,0x2A,0x28,0x0C,0x8A,0xB0,0x62,0xE6,0x11,0xCB,0x51,0x79,0xC8,0x52,0x0D,0x7F,0x79,
 0x58,0x94,0x12,0x7C,0xBC,0x52,0xFA,0xEF,0x76,0x48,0x38,0x55,0x6A,0xF4,0xF0,0x3F,0xCE,0x77,0xDC,
 0x23,0xAF,0xFF,0xE6,0x8E,0x81,0xAA,0x43,0x60,0xCE,0xA4,0xD1,0x4C,0xD3,0x5B,0xDF,0xA9,0x8A,0x58,
 0xD1,0x51,0x43,0xF4,0x90,0xD7,0x94,0x3C,0xE2,0xF5,0x14,0xDE,0x97,0xE1,0x35,0x1F,0xC8,0xAB,0x39,
 0x94,0xB1,0xA8,0xA7,0x14,0x91,0x54,0x96,0x32,0xAA,0xD2,0xD9,0xFD,0xAE,0xE1,0xD0,0x0D,0xA2,0xCF,
 0x2B,0x67,0x9C,0x05,0x60,0x98,0xF8,0x79,0x4F,0x1B,0x10,0xEE,0xA8,0x97,0x7C,0xA4,0x11,0x68,0x44,
 0xDF,0xD3,0xDC,0xBA,0x3D,0xEF,0xF0,0xE4,0x77,0xF7,0x42,0x66,0x35,0x3B,0x1D,0xD1,0x03,0xAD,0x7E,
 0x6A,0x25,0x70,0x68,0x08,0xD0,0x8D,0x32,0x8E,0x8E,0x23,0xEF,0xB1,0x16,0x7D,0xD3,0xFD,0xC7,0x83,
 0x00,0xA5,0xE9,0x19,0x0A,0x61,0x7F,0x37,0x54,0xF5,0x5C,0x0B,0x77,0xAD,0xF5,0xF5,0x26,0x52,0x82,
 0x43,0x48,0xB6,0x25,0x55,0x60,0x93,0xBA,0xED,0xC1,0xC2,0xEB,0xEB,0xAB,0x08,0xE3,0x37,0x19,0x5F,
 0xA3,0x8A,0x82,0xA5,0x17,0x3E,0xE5,0x7F,0xA2,0x4E,0x46,0x96,0xE7,0xA4,0x9A,0x82,0xEA,0x3F,0x25,
 0xFB,0x30,0x57,0xD8,0x92,0xF4,0x74,0xA5,0x40,0xE9,0xFF,0x43,0xB2,0x0C,0x14,0xCF,0x51,0x9C,0x80,
 0x83,0x5A,0x41,0x31,0xF8,0x1A,0x86,0x4B,0x7A,0x93,0x95,0xF4,0x66,0xFF,0x0F,0xBD,0x95,0x9E,0x47,
 0xDC,0x3B,0x94,0xF9,0x95,0xE0,0xC0,0x23,0xF7,0xAA,0x6E,0x44,0x4E,0x73,0x05,0xC8,0x0D,0xA3,0x20,
 0x18,0x46,0xF1,0xDE,0x33,0xE3,0x76,0x39,0x9E,0x37,0x0A,0x32,0xAB,0x29,0x86,0xBB,0x72,0xD1,0x13,
 0x48,0xFB,0xF7,0x9E,0x03,0x3C,0xBF,0x6C,0x35,0xC7,0x48,0x1D,0x6C,0x82,0xF0,0x60,0xF4,0xE7,0x96,
 0x6B,0x78,0x65,0xEF,0xBA,0x15,0xF5,0x10,0xB4,0x73,0x21,0x39,0x5C,0x48,0x06,0x5A,0xE9,0x80,0xAA,
 0x71,0x5E,0x85,0x38,0x69,0x4B,0x8D,0x1F,0xAA,0x31,0x48,0xFC,0x1D,0x4F,0x0E,0x11,0x0D,0x19,0x6C,
 0xE9,0x50,0x1A,0xC7,0x8D,0x8A,0xA4,0x03,0x99,0xD1,0x64,0x92,0x62,0xF6,0x91,0xBB,0x24,0x23,0x29,
 0xFB,0xC7,0xC2,0x25,0xF5,0xA0,0x4B,0xC3,0x08,0xAE,0x70,0xA2,0x8C,0x35,0x42,0x8B,0x56,0x32,0xB3,
 0x93,0xFE,0xF1,0x47,0xD9,0xD9,0x4D,0x5B,0x41,0xD5,0xBD,0xDE,0xF1,0x6A,0x9D,0x5D,0xAF,0x95,0x80,
 0x41,0xFF,0xC7,0x9A,0x82,0xEA,0x9A,0xE2,0xF2,0x54,0x99,0xFB,0xC4,0x25,0x9F,0x27,0x12,0x46,0x5A,
 0xB3,0x59,0xAE,0xD0,0x30,0x9E,0xA7,0xE7,0x75,0x5B,0xA5,0x86,0xBB,0x6C,0xCA,0xEE,0xCA,0xEC,0xC0,
 0xD3,0xF8,0xAA,0x20,0xF5,0x93,0x68,0x86,0x93,0x03,0xB8,0x25,0xD2,0x20,0x68,0x96,0x7E,0x47,0x40,
 0x75,0x3B,0x58,0x35,0x6B,0x7D,0x1D,0x49,0x70,0x1E,0xB9,0x23,0xCA,0x73,0x32,0xE0,0x2F,0x6B,0xEC,
 0x80,0x4D,0x5E,0x57,0x02,0xD7,0x87,0x32,0x05,0xD5,0x74,0x03,0xCA,0x0E,0x38,0xE6,0x8B,0x04,0x2E,
 0xEF,0xA6,0xA2,0x06,0x83,0x31,0x6E,0x1E,0x7C,0x35,0x63,0xCD,0xE2,0x0B,0xD6,0x2A,0x97,0xC2,0x6E,
 0xAA,0x12,0x86,0x1A,0xAA,0x08,0x86,0xF2,0xF8,0xD1,0x93,0xA8,0x51,0xA9,0x07,0x54,0x61,0x1A,0x9F,
 0x03,0x85,0x4C,0x7E,0x0E,0x60,0x6E,0x56,0x2F,0xDA,0x21,0xBD,0xA8,0xD5,0xD2,0x65,0x96,0xEE,0x38,
 0x50,0xE6,0x44,0x37,0x22,0xB1,0x04,0xA6,0x9A,0x91,0x45,0x83,0xBD,0x39,0x90,0x6F,0x28,0x5A,0x22,
 0xC7,0xD4,0x6B,0x15,0x89,0x57,0x56,0x24,0xCF,0xE5,0x1E,0x58,0xE4,0x17,0x90,0xC7,0x2C,0xA7,0x18,
 0x4C,0x4F,0x67,0x84,0xB9,0x3E,0x77,0x40,0x2E,0x48,0x55,0x65,0x90,0xD4,0xDA,0xA2,0x05,0xF7,0xDF,
 0x55,0x2B,0xC8,0x9B,0xB7,0x69,0xDE,0x70,0xD3,0xA2,0xF5,0x50,0x03,0x46,0x34,0x6F,0xC2,0x59,0x4C,
 0xF2,0x26,0xD4,0xB2,0xC5,0x3A,0x05,0xB0,0xF8,0x8C,0xE3,0xBC,0x15,0xFB,0x45,0xCB,0xC7,0x0F,0x25,
 0x5E,0x54,0x40,0x3D,0xAC,0xDA,0x52,0xC7,0xD6,0xAC,0x45,0xDE,0xE8,0x56,0xFC,0x07,0xFF,0x21,0xFF,
 0x70,0x55,0x59,0x70,0x13,0x17,0xAD,0x29,0x29,0x78,0x19,0x87,0xF1,0x57,0x29,0x49,0x6A,0x35,0x71,
 0xAD,0xA6,0x65,0x7F,0x55,0x76,0x32,0xDD,0xD6,0x26,0x75,0x7B,0x84,0x9E,0xCB,0x3F,0xCF,0x22,0x4F,
 0xE4,0x96,0xBA,0x11,0x6A,0x13,0x03,0xF2,0x3F,0xBD,0x6E,0xA7,0xD9,0xBF,0x2D,0x45,0x0F,0x8F,0x4E,
 0x8E,0x86,0x47,0xF5,0xC4,0x39,0xD1,0x1A,0x2A,0x15,0x37,0xAA,0xF4,0x2A,0x23,0x30,0x90,0x60,0x05,
 0xF4,0x75,0x7D,0x5D,0xDA,0xC5,0xBB,0xC1,0xF9,0x99,0x19,0xA3,0x04,0x2C,0x12,0x35,0x88,0x0B,0xE5,
 0x12,0xCD,0x8D,0xDF,0x1C,0xD5,0xD2,0x75,0xF1,0xC2,0x60,0xB3,0x85,0x21,0x77,0x93,0xF5,0xB0,0xEF,
 0xF0,0xBC,0x32,0xBF,0x09,0x82,0xE0,0x34,0xA9,0x02,0x55,0xAF,0x20,0xA7,0xEE,0xE6,0xE1,0x12,0x70,
 0x55,0xC1,0x34,0xD1,0x0D,0xE6,0x93,0xB4,0x5E,0xA8,0x34,0x9C,0xC2,0xDF,0x94,0xF6,0xA2,0x68,0xC9,
 0xE5,0x96,0x73,0x6E,0xF9,0x16,0x24,0xE4,0x00,0xA2,0xE1,0x1E,0xB3,0x8A,0xB6,0xD5,0xD9,0xA8,0x10,
 0x7B,0x08,0x55,0x0D,0xFA,0x8F,0xD5,0x93,0x16,0xEA,0x49,0x9F,0x9A,0x27,0x7E,0x68,0xD8,0x5A,0xB9,
 0x4D,0x6F,0x0C,0xA4,0xDD,0xF5,0x0A,0xCB,0xE5,0x10,0x61,0xC1,0x0D,0xC0,0x6D,0x2A,0xC6,0x6F,0xD1,
 0x3D,0x92,0x37,0x41,0x05,0xF4,0x39,0x43,0x15,0xD3,0xDD,0xDF,0xA0,0x55,0xCC,0x5C,0x72,0x03,0x29,
 0x34,0x9F,0x5A,0x33,0x5B,0x72,0x0E,0x95,0xC7,0xA8,0x7C,0x03,0x28,0xEF,0x22,0x3F,0x59,0x56,0x13,
 0x70,0xDD,0x6E,0xD6,0xD7,0x9F,0x35,0x9C,0xA6,0x9F,0xAE,0xF2,0x9B,0xA6,0x45,0xA0,0xA5,0xCA,0x92,
 0x03,0xF7,0x83,0x68,0xAC,0xF1,0x4B,0xA6,0x39,0x97,0xB6,0x4D,0x17,0xBA,0xF1,0x17,0xF5,0x25,0x32,
 0xDC,0xBA,0xDB,0x95,0x14,0xD6,0xD4,0xF5,0x99,0x3A,0xE8,0x69,0xA5,0xF4,0x34,0x23,0x11,0x46,0x85,
 0xF7,0xE0,0x02,0x01,0xCB,0x3B,0x12,0x0D,0x7C,0x42,0xAD,0xA7,0xAA,0x40,0x1A,0xE8,0x3D,0x5C,0x10,
 0x0E,0x78,0xE5,0x2A,0x83,0x56,0xC3,0x07,0x7E,0xDD,0xD6,0xF8,0x87,0x8D,0x17,0x06,0x44,0x4B,0xA9,
 0x65,0x0E,0x68,0x99,0x28,0x30,0xD5,0x8E,0xB8,0x17,0x35,0xF9,0x61,0xC1,0x2E,0x25,0x94,0x02,0x94,
 0x3A,0x11,0x10,0x52,0x1B,0xE4,0x35,0x29,0x92,0x97,0x1F,0x21,0x18,0x40,0x7D,0x3E,0x01,0x10,0x91,
 0xA0,0x0E,0x54,0xA8,0x46,0xAE,0x2E,0x62,0xA5,0x0A,0x22,0x95,0x54,0x2F,0x2E,0x5C,0xE0,0x72,0xDD,
 0xE4,0xA4,0x69,0xB8,0x30,0xEF,0x5C,0x8D,0xD7,0x04,0x5A,0xC2,0x33,0x9B,0x01,0x4E,0x53,0xC1,0x2E,
 0x17,0xC7,0x69,0xE4,0x81,0x34,0x00,0xAD,0x13,0x42,0x8B,0x6F,0x04,0x82,0xE1,0x80,0xA1,0x8F,0xC3,
 0x1C,0xC2,0xA0,0xC9,0x41,0x88,0x83,0xBE,0x11,0x12,0x1E,0x88,0x0C,0x92,0xC0,0x6B,0x6E,0xB7,0x63,
 0x19,0x4F,0x97,0x1D,0xA5,0x78,0x10,0x4D,0xD8,0x10,0xEE,0x91,0x35,0x48,0x00,0x9E,0xCE,0xE0,0xA0,
 0x01,0x04,0x5E,0x6D,0x23,0xDF,0xEF,0x18,0x32,0xBB,0x00,0xFE,0xB3,0xBE,0xCB,0x5F,0x39,0x4F,0xE0,
 0xF2,0x16,0x30,0x73,0xE0,0xC0,0x8F,0x66,0x17,0x09,0x3C,0xA7,0x9D,0x8A,0x32,0x54,0x5B,0xEB,0x8A,
 0xE3,0x93,0x17,0x2B,0xE2,0x7C,0x8A,0x1B,0x97,0x39,0x8F,0xEB,0x76,0xE3,0xDE,0xC5,0x18,0xC3,0x81,
 0x40,0x9A,0x61,0xCF,0x67,0x50,0xC1,0xAA,0x07,0x2C,0x09,0xDA,0x03,0xD5,0x08,0x91,0x0B,0x1D,0x39,
 0x07,0xFA,0x0B,0x83,0xFB,0x0E,0xBB,0xEE,0xD4,0x52,0x8D,0x41,0x6A,0x33,0x2D,0x74,0x46,0x6F,0xA9,
 0x90,0xC3,0x82,0x0F,0x03,0x7B,0xF5,0xCE,0x29,0x3C,0xFA,0x42,0xAC,0xFA,0x0B,0x3A,0xE0,0xCE,0x3D,
 0xFA,0x1A,0x1D,0x9F,0x96,0xE8,0xF8,0xB4,0x8A,0x0E,0xDC,0x10,0x1E,0xEF,0x8C,0x60,0xD9,0x53,0x44,
 0xE1,0x31,0x30,0x81,0x01,0xBE,0x09,0x88,0xE4,0x9F,0x51,0x96,0xE0,0xAF,0x53,0x36,0xF0,0xC9,0x84,
 0x2D,0xD3,0x27,0x47,0xFF,0x1D,0x95,0xB0,0xE1,0x6A,0x2A,0x8B,0xDC,0xB4,0x0C,0x28,0x7F,0x7D,0x57,
 0x22,0xEC,0xC8,0x01,0xF7,0x52,0x37,0x90,0x7F,0xA1,0xE9,0x81,0xC6,0x38,0x3D,0xB5,0xA2,0x8E,0xEE,
 0x43,0x2A,0x7F,0x02,0x04,0x69,0xD2,0xF1,0x61,0x67,0xBE,0x30,0x98,0xA3,0x81,0x60,0xE0,0x66,0x07,
 0x48,0x75,0x45,0x82,0x6B,0xFA,0x09,0xE6,0x31,0x0F,0xB6,0x84,0x78,0xDA,0xF9,0xBC,0xB7,0x7E,0xD3,
 0x82,0x38,0xE4,0xC0,0x87,0xEE,0x40,0x63,0xFD,0xE6,0x7B,0xBD,0x33,0x25,0x46,0xC9,0x92,0x88,0x68,
 0x20,0xA4,0xCF,0xF4,0xC6,0x41,0xC0,0x75,0x3D,0xE0,0x95,0xDE,0x0C,0xB4,0x8D,0x33,0x0B,0x1F,0xFC,
 0x8B,0x12,0xF0,0x21,0x2C,0x0F,0x8C,0x7B,0xC5,0x7D,0xBC,0x9A,0xC9,0x16,0x60,0xD5,0x2E,0xAC,0x54,
 0x06,0x7F,0x55,0x5E,0x65,0xB1,0x9A,0x2B,0x91,0xCB,0x82,0xD7,0x90,0x8D,0x65,0x17,0x55,0x56,0x07,
 0x39,0x5C,0x5F,0x70,0xBD,0xC5,0x13,0x30,0x41,0x4F,0x2D,0x83,0xE7,0xCF,0xA7,0x27,0xC7,0x8C,0xC5,
 0x57,0xD2,0x29,0xC2,0x62,0xCD,0x81,0xEA,0xF4,0x74,0x78,0x30,0x79,0x2C,0x72,0x1D,0x1E,0x19,0xA4,
 0x45,0xFF,0x7C,0x3E,0xBE,0xC5,0x2E,0x04,0x9D,0xD3,0x14,0x22,0xD6,0x86,0xC9,0xD1,0x87,0xC3,0x0B,
 0x73,0xDB,0xB4,0x20,0x31,0x00,0xB1,0xBA,0x3E,0x3F,0xF8,0xC5,0x3F,0x42,0xDE,0xFC,0x67,0xC8,0x04,
 0xDC,0x56,0x0A,0x7E,0xA9,0xC0,0x6F,0xE2,0xFA,0x49,0x34,0x13,0x68,0x47,0x49,0xC2,0x4F,0x65,0x08,
 0x29,0x8A,0x32,0x86,0x41,0xF8,0xAE,0x00,0xBC,0xC9,0xE0,0x14,0x1E,0x69,0x99,0x92,0x66,0x71,0x0C,
 0x95,0xCB,0x92,0x3C,0x4C,0xB5,0xB8,0x7E,0xB9,0xCC,0x70,0x86,0xBD,0x7C,0x18,0x27,0x75,0xB9,0x88,
 0x14,0xEA,0x77,0x0E,0x77,0x3E,0xDF,0xE4,0x09,0x55,0x46,0x29,0x77,0xA3,0x6B,0x5D,0xD9,0x07,0xEE,
 0x7C,0x58,0xD5,0xA1,0x59,0x10,0x2C,0x7A,0x4B,0x6B,0x41,0xE5,0x15,0xB1,0x48,0xDC,0x97,0xCF,0x7F,
 0xCB,0xA3,0x93,0xBD,0x74,0xB5,0xDA,0x5C,0xD5,0x32,0xD6,0xB4,0x35,0x0C,0x6F,0x60,0x29,0x43,0xD4,
 0xE5,0xC7,0x28,0x65,0xA1,0x17,0xC9,0x14,0x9F,0xDE,0xE3,0xC6,0x26,0x94,0xE9,0xD9,0x80,0x2A,0x38,
 0xA3,0x70,0xAD,0xCB,0xD3,0x2A,0xCC,0x13,0x54,0x14,0xA6,0xB5,0x65,0xCB,0xD4,0x40,0xA7,0x4E,0x01,
 0xEE,0xE1,0x20,0x85,0xAD,0xAB,0xF9,0x2B,0xC8,0x28,0xEA,0x39,0x04,0x30,0xA5,0x98,0xA7,0xD3,0x16,
 0xEC,0xC4,0x03,0xDD,0x9E,0x88,0xBA,0x42,0x83,0x43,0xCC,0xFC,0xC8,0xDB,0x53,0xF7,0x54,0x5B,0x85,
 0x7F,0xEB,0xAA,0x01,0xB3,0x30,0x75,0xC1,0x96,0x47,0x57,0x6F,0xC1,0x3F,0xC5,0x11,0xE5,0x8F,0x64,
 0x08,0xDC,0x34,0xBF,0x7B,0x7D,0x0A,0x29,0x96,0xFF,0x8C,0x6E,0xF4,0x5E,0x53,0xD8,0x78,0xB6,0x74,
 0x9C,0x8D,0xC3,0x80,0x62,0x98,0xBB,0xAC,0xC7,0x94,0x3F,0xFE,0x3D,0xB9,0xD0,0x36,0x68,0x95,0xD8,
 0x57,0x47,0xBD,0xC5,0x69,0x16,0x58,0x03,0xC0,0xE2,0xB6,0x57,0x09,0xF9,0xB9,0xBC,0x86,0x9A,0xF0,
 0x25,0x90,0x80,0xBF,0xD6,0x02,0xAD,0x7C,0xB3,0x2C,0x35,0xF8,0x22,0x29,0x30,0x90,0xE2,0x21,0x7E,
 0x00,0x9B,0x16,0x79,0x86,0xD4,0xA1,0xBC,0x00,0xE6,0x49,0x47,0x4D,0x8D,0x74,0xA3,0xEC,0xAD,0xAF,
 0x33,0xB3,0x50,0x13,0xAD,0x40,0x4A,0xB9,0x07,0xD7,0x74,0x5E,0x5B,0x68,0x75,0x26,0x79,0xB2,0xF6,
 0x44,0xDA,0x5A,0x53,0x0C,0x90,0xF2,0x69,0x05,0x0C,0x28,0x83,0xAF,0xA5,0x80,0xDB,0xE5,0x41,0xBA,
 0x31,0x2D,0x85,0xC4,0x10,0x36,0xB0,0xFF,0x12,0x59,0xA0,0xD2,0xBA,0x56,0x0C,0x58,0x22,0xE8,0x5E,
 0x5A,0x8F,0xE5,0xA7,0x72,0x8C,0xA5,0xEB,0x3B,0x80,0xAB,0x09,0xFE,0xE5,0x01,0x6E,0x09,0x90,0x93,
 0x41,0x2E,0x1A,0x10,0xE9,0x97,0x3B,0x70,0x8D,0x3D,0x9B,0xB5,0xF9,0x63,0x6D,0x1B,0x76,0x90,0x5A,
 0xE0,0xA9,0xAB,0x28,0xA4,0x5C,0x04,0x46,0xCA,0x1F,0xA6,0x97,0x4C,0xB4,0x92,0x9F,0xB6,0x64,0xA3,
 0xCD,0x75,0x96,0xE8,0xAC,0x4E,0x7B,0x67,0x6B,0x09,0x84,0xC6,0xFC,0x59,0x16,0x42,0x0D,0xC4,0xE1,
 0x72,0xB7,0xA2,0xCE,0xA9,0xFB,0x05,0x33,0xCE,0x52,0x5F,0x9B,0x03,0xE9,0x36,0x33,0xA4,0xAC,0x6C,
 0x6C,0x48,0xBD,0xB5,0xA9,0x51,0xE8,0x87,0xCD,0x43,0x48,0x9D,0xB6,0x3F,0xFE,0xE0,0xBD,0xEA,0xB4,
 0x79,0x6F,0xE9,0xC0,0x17,0xF2,0xAE,0xB5,0x48,0x6A,0xB9,0xD2,0x2F,0xFB,0xAA,0x9D,0x4E,0xFE,0x8E,
 0xBD,0x23,0x3F,0x15,0x50,0xF6,0x04,0xC4,0xEF,0x64,0x6C,0xD2,0x7E,0xA5,0x10,0x8F,0xE7,0x97,0xE2,
 0x71,0x81,0x73,0x95,0xDA,0x9D,0x8E,0xEB,0xD1,0xDB,0x14,0xF2,0xE8,0x28,0xF3,0x26,0xF0,0x55,0x1B,
 0xCC,0x33,0x8E,0x0E,0xBA,0x45,0x0F,0x9D,0x80,0x8C,0xD3,0x0E,0x8F,0xB6,0x5D,0x73,0xC3,0xDC,0xE6,
 0x2D,0xF3,0x36,0xDD,0x5D,0xDE,0x61,0xB7,0xAC,0xD2,0x1C,0xA7,0x4C,0x5E,0xA5,0x6F,0x92,0x13,0x9C,
 0x67,0xDE,0xC2,0x55,0x09,0x86,0x2A,0x56,0x36,0xE4,0x13,0x4C,0xBE,0x8D,0x6A,0xE4,0x83,0x28,0x7D,
 0xA4,0x2E,0xF7,0xAD,0xE5,0x2A,0x3E,0x1C,0x52,0xA3,0xB2,0x95,0x33,0xF5,0x45,0x45,0x19,0xBF,0xCC,
 0x53,0x22,0xF9,0x88,0x53,0xCF,0x07,0x76,0x77,0xA0,0x6C,0xE6,0x42,0x90,0x56,0xAC,0x88,0xAA,0x39,
 0xEF,0x00,0x63,0x00,0x2C,0x67,0x64,0xF1,0xCA,0x61,0x1E,0x9C,0x97,0x86,0x64,0xE4,0x5F,0x1A,0xCC,
 0xEB,0x9F,0xFC,0x71,0xA6,0xF6,0xBD,0x85,0x12,0x9B,0x88,0x97,0x27,0x3E,0xB7,0xF9,0x16,0xB5,0x1A,
 0x45,0xCE,0xDE,0xFD,0x13,0x71,0x07,0xAF,0xD9,0x93,0x29,0x00,0x00
};

#define SPIFFS_MAXLENGTH_FILEPATH 32
const char *excludeListFile = "/.exclude.files";

typedef struct ExcludeListS {
    char *item;
    ExcludeListS *next;
} ExcludeList;

static ExcludeList *excludes = NULL;

static bool matchWild(const char *pattern, const char *testee) {
  const char *nxPat = NULL, *nxTst = NULL;

  while (*testee) {
    if (( *pattern == '?' ) || (*pattern == *testee)){
      pattern++;testee++;
      continue;
    }
    if (*pattern=='*'){
      nxPat=pattern++; nxTst=testee;
      continue;
    }
    if (nxPat){ 
      pattern = nxPat+1; testee=++nxTst;
      continue;
    }
    return false;
  }
  while (*pattern=='*'){pattern++;}  
  return (*pattern == 0);
}

static bool addExclude(const char *item){
    size_t len = strlen(item);
    if(!len){
        return false;
    }
    ExcludeList *e = (ExcludeList *)malloc(sizeof(ExcludeList));
    if(!e){
        return false;
    }
    e->item = (char *)malloc(len+1);
    if(!e->item){
        free(e);
        return false;
    }
    memcpy(e->item, item, len+1);
    e->next = excludes;
    excludes = e;
    return true;
}

static void loadExcludeList(fs::FS &_fs, const char *filename){
    static char linebuf[SPIFFS_MAXLENGTH_FILEPATH];
    fs::File excludeFile=_fs.open(filename, "r");
    if(!excludeFile){
        //addExclude("/*.js.gz");
        return;
    }
#ifdef ESP32
    if(excludeFile.isDirectory()){
      excludeFile.close();
      return;
    }
#endif
    if (excludeFile.size() > 0){
      uint8_t idx;
      bool isOverflowed = false;
      while (excludeFile.available()){
        linebuf[0] = '\0';
        idx = 0;
        int lastChar;
        do {
          lastChar = excludeFile.read();
          if(lastChar != '\r'){
            linebuf[idx++] = (char) lastChar;
          }
        } while ((lastChar >= 0) && (lastChar != '\n') && (idx < SPIFFS_MAXLENGTH_FILEPATH));

        if(isOverflowed){
          isOverflowed = (lastChar != '\n');
          continue;
        }
        isOverflowed = (idx >= SPIFFS_MAXLENGTH_FILEPATH);
        linebuf[idx-1] = '\0';
        if(!addExclude(linebuf)){
            excludeFile.close();
            return;
        }
      }
    }
    excludeFile.close();
}

static bool isExcluded(fs::FS &_fs, const char *filename) {
  if(excludes == NULL){
      loadExcludeList(_fs, excludeListFile);
  }
  ExcludeList *e = excludes;
  while(e){
    if (matchWild(e->item, filename)){
      return true;
    }
    e = e->next;
  }
  return false;
}

// WEB HANDLER IMPLEMENTATION

#ifdef ESP32
FS_editor::FS_editor(const fs::FS& fs, const String& username, const String& password)
#else
FS_editor::FS_editor(const String& username, const String& password, const fs::FS& fs)
#endif
:_fs(fs)
,_username(username)
,_password(password)
,_authenticated(false)
,_startTime(0)
{}

bool FS_editor::canHandle(AsyncWebServerRequest *request){
  if(request->url().equalsIgnoreCase("/edit")){
    if(request->method() == HTTP_GET){
      if(request->hasParam("list"))
        return true;
      if(request->hasParam("edit")){
        request->_tempFile = _fs.open(request->arg("edit"), "r");
        if(!request->_tempFile){
          return false;
        }
#ifdef ESP32
        if(request->_tempFile.isDirectory()){
          request->_tempFile.close();
          return false;
        }
#endif
      }
      if(request->hasParam("download")){
        request->_tempFile = _fs.open(request->arg("download"), "r");
        if(!request->_tempFile){
          return false;
        }
#ifdef ESP32
        if(request->_tempFile.isDirectory()){
          request->_tempFile.close();
          return false;
        }
#endif
      }
      request->addInterestingHeader("If-Modified-Since");
      return true;
    }
    else if(request->method() == HTTP_POST)
      return true;
    else if(request->method() == HTTP_DELETE)
      return true;
    else if(request->method() == HTTP_PUT)
      return true;

  }
  return false;
}


void FS_editor::handleRequest(AsyncWebServerRequest *request){
  if(_username.length() && _password.length() && !request->authenticate(_username.c_str(), _password.c_str()))
    return request->requestAuthentication();

  if(request->method() == HTTP_GET){
    if(request->hasParam("list")){
      String path = request->getParam("list")->value();
#ifdef ESP32
      File dir = _fs.open(path);
#else
      Dir dir = _fs.openDir(path);
#endif
      path = String();
      String output = "[";
#ifdef ESP32
      File entry = dir.openNextFile();
      while(entry){
#else
      while(dir.next()){
        fs::File entry = dir.openFile("r");
#endif
        if (isExcluded(_fs, entry.name())) {
#ifdef ESP32
            entry = dir.openNextFile();
#endif
            continue;
        }
        if (output != "[") output += ',';
        output += "{\"type\":\"";
        output += "file";
        output += "\",\"name\":\"";
//        output += String(entry.name());
#ifdef ESP32
        output += String(entry.path());
#else
        output += String(entry.name());
#endif
        output += "\",\"size\":";
        output += String(entry.size());
        output += "}";
#ifdef ESP32
        entry = dir.openNextFile();
#else
        entry.close();
#endif
      }
#ifdef ESP32
      dir.close();
#endif
      output += "]";
      request->send(200, "application/json", output);
      output = String();
    }
    else if(request->hasParam("edit") || request->hasParam("download")){
      request->send(request->_tempFile, request->_tempFile.name(), String(), request->hasParam("download"));
    }
    else {
      const char * buildTime = __DATE__ " " __TIME__ " GMT";
      if (request->header("If-Modified-Since").equals(buildTime)) {
        request->send(304);
      } else {
        AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", edit_htm_gz, edit_htm_gz_len);
        response->addHeader("Content-Encoding", "gzip");
        response->addHeader("Last-Modified", buildTime);
        request->send(response);
      }
    }
  } else if(request->method() == HTTP_DELETE){
    if(request->hasParam("path", true)){
        _fs.remove(request->getParam("path", true)->value());
      request->send(200, "", "DELETE: "+request->getParam("path", true)->value());
    } else
      request->send(404);
  } else if(request->method() == HTTP_POST){
    if(request->hasParam("data", true, true) && _fs.exists(request->getParam("data", true, true)->value()))
      request->send(200, "", "UPLOADED: "+request->getParam("data", true, true)->value());
    else
      request->send(500);
  } else if(request->method() == HTTP_PUT){
    if(request->hasParam("path", true)){
      String filename = request->getParam("path", true)->value();
      if(_fs.exists(filename)){
        request->send(200);
      } else {
        fs::File f = _fs.open(filename, "w");
        if(f){
          f.write((uint8_t)0x00);
          f.close();
          request->send(200, "", "CREATE: "+filename);
        } else {
          request->send(500);
        }
      }
    } else
      request->send(400);
  }
}

void FS_editor::handleUpload(AsyncWebServerRequest *request, const String& filename, size_t index, uint8_t *data, size_t len, bool final){
  if(!index){
    if(!_username.length() || request->authenticate(_username.c_str(),_password.c_str())){
      _authenticated = true;
      request->_tempFile = _fs.open(filename, "w");
      _startTime = millis();
    }
  }
  if(_authenticated && request->_tempFile){
    if(len){
      request->_tempFile.write(data,len);
    }
    if(final){
      request->_tempFile.close();
    }
  }
}
